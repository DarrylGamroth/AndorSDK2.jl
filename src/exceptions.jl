struct AndorSdk2Error <: Exception
    msg::String
end

Base.showerror(io::IO, e::AndorSdk2Error) = print(io, "AndorSDK2 error=$(e.msg)")

const error_codes = Dict(
    LibAndorSDK2.DRV_ERROR_CODES => "DRV_ERROR_CODES",
    LibAndorSDK2.DRV_VXDNOTINSTALLED => "DRV_VXDNOTINSTALLED",
    LibAndorSDK2.DRV_ERROR_SCAN => "DRV_ERROR_SCAN",
    LibAndorSDK2.DRV_ERROR_CHECK_SUM => "DRV_ERROR_CHECK_SUM",
    LibAndorSDK2.DRV_ERROR_FILELOAD => "DRV_ERROR_FILELOAD",
    LibAndorSDK2.DRV_UNKNOWN_FUNCTION => "DRV_UNKNOWN_FUNCTION",
    LibAndorSDK2.DRV_ERROR_VXD_INIT => "DRV_ERROR_VXD_INIT",
    LibAndorSDK2.DRV_ERROR_ADDRESS => "DRV_ERROR_ADDRESS",
    LibAndorSDK2.DRV_ERROR_PAGELOCK => "DRV_ERROR_PAGELOCK",
    LibAndorSDK2.DRV_ERROR_PAGEUNLOCK => "DRV_ERROR_PAGEUNLOCK",
    LibAndorSDK2.DRV_ERROR_BOARDTEST => "DRV_ERROR_BOARDTEST",
    LibAndorSDK2.DRV_ERROR_ACK => "DRV_ERROR_ACK",
    LibAndorSDK2.DRV_ERROR_UP_FIFO => "DRV_ERROR_UP_FIFO",
    LibAndorSDK2.DRV_ERROR_PATTERN => "DRV_ERROR_PATTERN",
    LibAndorSDK2.DRV_ACQUISITION_ERRORS => "DRV_ACQUISITION_ERRORS",
    LibAndorSDK2.DRV_ACQ_BUFFER => "DRV_ACQ_BUFFER",
    LibAndorSDK2.DRV_ACQ_DOWNFIFO_FULL => "DRV_ACQ_DOWNFIFO_FULL",
    LibAndorSDK2.DRV_PROC_UNKONWN_INSTRUCTION => "DRV_PROC_UNKONWN_INSTRUCTION",
    LibAndorSDK2.DRV_ILLEGAL_OP_CODE => "DRV_ILLEGAL_OP_CODE",
    LibAndorSDK2.DRV_KINETIC_TIME_NOT_MET => "DRV_KINETIC_TIME_NOT_MET",
    LibAndorSDK2.DRV_ACCUM_TIME_NOT_MET => "DRV_ACCUM_TIME_NOT_MET",
    # LibAndorSDK2.DRV_NO_NEW_DATA => "DRV_NO_NEW_DATA",
    LibAndorSDK2.DRV_PCI_DMA_FAIL => "DRV_PCI_DMA_FAIL",
    LibAndorSDK2.DRV_SPOOLERROR => "DRV_SPOOLERROR",
    LibAndorSDK2.DRV_SPOOLSETUPERROR => "DRV_SPOOLSETUPERROR",
    LibAndorSDK2.DRV_FILESIZELIMITERROR => "DRV_FILESIZELIMITERROR",
    LibAndorSDK2.DRV_ERROR_FILESAVE => "DRV_ERROR_FILESAVE",
    # LibAndorSDK2.DRV_TEMPERATURE_CODES => "DRV_TEMPERATURE_CODES",
    # LibAndorSDK2.DRV_TEMPERATURE_OFF => "DRV_TEMPERATURE_OFF",
    # LibAndorSDK2.DRV_TEMPERATURE_NOT_STABILIZED => "DRV_TEMPERATURE_NOT_STABILIZED",
    # LibAndorSDK2.DRV_TEMPERATURE_STABILIZED => "DRV_TEMPERATURE_STABILIZED",
    # LibAndorSDK2.DRV_TEMPERATURE_NOT_REACHED => "DRV_TEMPERATURE_NOT_REACHED",
    # LibAndorSDK2.DRV_TEMPERATURE_OUT_RANGE => "DRV_TEMPERATURE_OUT_RANGE",
    # LibAndorSDK2.DRV_TEMPERATURE_NOT_SUPPORTED => "DRV_TEMPERATURE_NOT_SUPPORTED",
    # LibAndorSDK2.DRV_TEMPERATURE_DRIFT => "DRV_TEMPERATURE_DRIFT",
    LibAndorSDK2.DRV_GENERAL_ERRORS => "DRV_GENERAL_ERRORS",
    LibAndorSDK2.DRV_INVALID_AUX => "DRV_INVALID_AUX",
    LibAndorSDK2.DRV_COF_NOTLOADED => "DRV_COF_NOTLOADED",
    LibAndorSDK2.DRV_FPGAPROG => "DRV_FPGAPROG",
    LibAndorSDK2.DRV_FLEXERROR => "DRV_FLEXERROR",
    LibAndorSDK2.DRV_GPIBERROR => "DRV_GPIBERROR",
    LibAndorSDK2.DRV_EEPROMVERSIONERROR => "DRV_EEPROMVERSIONERROR",
    LibAndorSDK2.DRV_DATATYPE => "DRV_DATATYPE",
    LibAndorSDK2.DRV_DRIVER_ERRORS => "DRV_DRIVER_ERRORS",
    LibAndorSDK2.DRV_P1INVALID => "DRV_P1INVALID",
    LibAndorSDK2.DRV_P2INVALID => "DRV_P2INVALID",
    LibAndorSDK2.DRV_P3INVALID => "DRV_P3INVALID",
    LibAndorSDK2.DRV_P4INVALID => "DRV_P4INVALID",
    LibAndorSDK2.DRV_INIERROR => "DRV_INIERROR",
    LibAndorSDK2.DRV_COFERROR => "DRV_COFERROR",
    # LibAndorSDK2.DRV_ACQUIRING => "DRV_ACQUIRING",
    # LibAndorSDK2.DRV_IDLE => "DRV_IDLE",
    # LibAndorSDK2.DRV_TEMPCYCLE => "DRV_TEMPCYCLE",
    LibAndorSDK2.DRV_NOT_INITIALIZED => "DRV_NOT_INITIALIZED",
    LibAndorSDK2.DRV_P5INVALID => "DRV_P5INVALID",
    LibAndorSDK2.DRV_P6INVALID => "DRV_P6INVALID",
    LibAndorSDK2.DRV_INVALID_MODE => "DRV_INVALID_MODE",
    LibAndorSDK2.DRV_INVALID_FILTER => "DRV_INVALID_FILTER",
    LibAndorSDK2.DRV_I2CERRORS => "DRV_I2CERRORS",
    LibAndorSDK2.DRV_I2CDEVNOTFOUND => "DRV_I2CDEVNOTFOUND",
    LibAndorSDK2.DRV_I2CTIMEOUT => "DRV_I2CTIMEOUT",
    LibAndorSDK2.DRV_P7INVALID => "DRV_P7INVALID",
    LibAndorSDK2.DRV_P8INVALID => "DRV_P8INVALID",
    LibAndorSDK2.DRV_P9INVALID => "DRV_P9INVALID",
    LibAndorSDK2.DRV_P10INVALID => "DRV_P10INVALID",
    LibAndorSDK2.DRV_P11INVALID => "DRV_P11INVALID",
    LibAndorSDK2.DRV_USBERROR => "DRV_USBERROR",
    LibAndorSDK2.DRV_IOCERROR => "DRV_IOCERROR",
    LibAndorSDK2.DRV_VRMVERSIONERROR => "DRV_VRMVERSIONERROR",
    LibAndorSDK2.DRV_GATESTEPERROR => "DRV_GATESTEPERROR",
    LibAndorSDK2.DRV_USB_INTERRUPT_ENDPOINT_ERROR => "DRV_USB_INTERRUPT_ENDPOINT_ERROR",
    LibAndorSDK2.DRV_RANDOM_TRACK_ERROR => "DRV_RANDOM_TRACK_ERROR",
    LibAndorSDK2.DRV_INVALID_TRIGGER_MODE => "DRV_INVALID_TRIGGER_MODE",
    LibAndorSDK2.DRV_LOAD_FIRMWARE_ERROR => "DRV_LOAD_FIRMWARE_ERROR",
    LibAndorSDK2.DRV_DIVIDE_BY_ZERO_ERROR => "DRV_DIVIDE_BY_ZERO_ERROR",
    LibAndorSDK2.DRV_INVALID_RINGEXPOSURES => "DRV_INVALID_RINGEXPOSURES",
    LibAndorSDK2.DRV_BINNING_ERROR => "DRV_BINNING_ERROR",
    LibAndorSDK2.DRV_INVALID_AMPLIFIER => "DRV_INVALID_AMPLIFIER",
    LibAndorSDK2.DRV_INVALID_COUNTCONVERT_MODE => "DRV_INVALID_COUNTCONVERT_MODE",
    # LibAndorSDK2.DRV_USB_INTERRUPT_ENDPOINT_TIMEOUT => "DRV_USB_INTERRUPT_ENDPOINT_TIMEOUT",
    LibAndorSDK2.DRV_ERROR_NOCAMERA => "DRV_ERROR_NOCAMERA",
    LibAndorSDK2.DRV_NOT_SUPPORTED => "DRV_NOT_SUPPORTED",
    LibAndorSDK2.DRV_NOT_AVAILABLE => "DRV_NOT_AVAILABLE",
    LibAndorSDK2.DRV_ERROR_MAP => "DRV_ERROR_MAP",
    LibAndorSDK2.DRV_ERROR_UNMAP => "DRV_ERROR_UNMAP",
    LibAndorSDK2.DRV_ERROR_MDL => "DRV_ERROR_MDL",
    LibAndorSDK2.DRV_ERROR_UNMDL => "DRV_ERROR_UNMDL",
    LibAndorSDK2.DRV_ERROR_BUFFSIZE => "DRV_ERROR_BUFFSIZE",
    LibAndorSDK2.DRV_ERROR_NOHANDLE => "DRV_ERROR_NOHANDLE",
    LibAndorSDK2.DRV_GATING_NOT_AVAILABLE => "DRV_GATING_NOT_AVAILABLE",
    LibAndorSDK2.DRV_FPGA_VOLTAGE_ERROR => "DRV_FPGA_VOLTAGE_ERROR",
    LibAndorSDK2.DRV_OW_CMD_FAIL => "DRV_OW_CMD_FAIL",
    LibAndorSDK2.DRV_OWMEMORY_BAD_ADDR => "DRV_OWMEMORY_BAD_ADDR",
    LibAndorSDK2.DRV_OWCMD_NOT_AVAILABLE => "DRV_OWCMD_NOT_AVAILABLE",
    LibAndorSDK2.DRV_OW_NO_SLAVES => "DRV_OW_NO_SLAVES",
    LibAndorSDK2.DRV_OW_NOT_INITIALIZED => "DRV_OW_NOT_INITIALIZED",
    LibAndorSDK2.DRV_OW_ERROR_SLAVE_NUM => "DRV_OW_ERROR_SLAVE_NUM",
    LibAndorSDK2.DRV_MSTIMINGS_ERROR => "DRV_MSTIMINGS_ERROR",
    LibAndorSDK2.DRV_OA_NULL_ERROR => "DRV_OA_NULL_ERROR",
    LibAndorSDK2.DRV_OA_PARSE_DTD_ERROR => "DRV_OA_PARSE_DTD_ERROR",
    LibAndorSDK2.DRV_OA_DTD_VALIDATE_ERROR => "DRV_OA_DTD_VALIDATE_ERROR",
    LibAndorSDK2.DRV_OA_FILE_ACCESS_ERROR => "DRV_OA_FILE_ACCESS_ERROR",
    LibAndorSDK2.DRV_OA_FILE_DOES_NOT_EXIST => "DRV_OA_FILE_DOES_NOT_EXIST",
    LibAndorSDK2.DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR => "DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR",
    LibAndorSDK2.DRV_OA_PRESET_FILE_NOT_LOADED => "DRV_OA_PRESET_FILE_NOT_LOADED",
    LibAndorSDK2.DRV_OA_USER_FILE_NOT_LOADED => "DRV_OA_USER_FILE_NOT_LOADED",
    LibAndorSDK2.DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED => "DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED",
    LibAndorSDK2.DRV_OA_INVALID_FILE => "DRV_OA_INVALID_FILE",
    LibAndorSDK2.DRV_OA_FILE_HAS_BEEN_MODIFIED => "DRV_OA_FILE_HAS_BEEN_MODIFIED",
    LibAndorSDK2.DRV_OA_BUFFER_FULL => "DRV_OA_BUFFER_FULL",
    LibAndorSDK2.DRV_OA_INVALID_STRING_LENGTH => "DRV_OA_INVALID_STRING_LENGTH",
    LibAndorSDK2.DRV_OA_INVALID_CHARS_IN_NAME => "DRV_OA_INVALID_CHARS_IN_NAME",
    LibAndorSDK2.DRV_OA_INVALID_NAMING => "DRV_OA_INVALID_NAMING",
    LibAndorSDK2.DRV_OA_GET_CAMERA_ERROR => "DRV_OA_GET_CAMERA_ERROR",
    LibAndorSDK2.DRV_OA_MODE_ALREADY_EXISTS => "DRV_OA_MODE_ALREADY_EXISTS",
    LibAndorSDK2.DRV_OA_STRINGS_NOT_EQUAL => "DRV_OA_STRINGS_NOT_EQUAL",
    LibAndorSDK2.DRV_OA_NO_USER_DATA => "DRV_OA_NO_USER_DATA",
    LibAndorSDK2.DRV_OA_VALUE_NOT_SUPPORTED => "DRV_OA_VALUE_NOT_SUPPORTED",
    LibAndorSDK2.DRV_OA_MODE_DOES_NOT_EXIST => "DRV_OA_MODE_DOES_NOT_EXIST",
    LibAndorSDK2.DRV_OA_CAMERA_NOT_SUPPORTED => "DRV_OA_CAMERA_NOT_SUPPORTED",
    LibAndorSDK2.DRV_OA_FAILED_TO_GET_MODE => "DRV_OA_FAILED_TO_GET_MODE",
    # LibAndorSDK2.DRV_OA_CAMERA_NOT_AVAILABLE => "DRV_OA_CAMERA_NOT_AVAILABLE",
    LibAndorSDK2.DRV_PROCESSING_FAILED => "DRV_PROCESSING_FAILED"
)

function check_error(code)
    int_code = Int64(code)
    if !haskey(error_codes, int_code)
        return
    end
    error_message = get(error_codes, int_code, "Unknown error code")
    throw(AndorSdk2Error(error_message))
end
